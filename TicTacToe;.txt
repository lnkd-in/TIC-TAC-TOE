package TicTacToe;
import java.util.Scanner;
public class TicTacToeGame
{
	 private static char[][] board = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
	    private static char currentPlayer = 'X';

	    public static void main(String[] args) {
	        displayBoard();

	        while (true) {
	            makeMove();
	            displayBoard();

	            if (checkWin()) {
	                System.out.println("Player " + currentPlayer + " wins!");
	                break;
	            }

	            if (isBoardFull()) {
	                System.out.println("It's a draw!");
	                break;
	            }

	            switchPlayer();
	        }
	    }

	    private static void displayBoard() {
	        System.out.println("  0 1 2");
	        for (int i = 0; i < 3; i++) {
	            System.out.print(i + " ");
	            for (int j = 0; j < 3; j++) {
	                System.out.print(board[i][j] + " ");
	            }
	            System.out.println();
	        }
	    }

	    private static void makeMove() {
	        Scanner scanner = new Scanner(System.in);

	        while (true) {
	            System.out.print("Player " + currentPlayer + ", enter your move (row and column): ");
	            int row = scanner.nextInt();
	            int col = scanner.nextInt();

	            if (isValidMove(row, col)) {
	                board[row][col] = currentPlayer;
	                break;
	            } else {
	                System.out.println("Invalid move. Try again.");
	            }
	        }
	    }

	    private static boolean isValidMove(int row, int col) {
	        return row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ';
	    }

	    private static boolean checkWin() {
	        for (int i = 0; i < 3; i++) {
	            if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) {
	                return true; // Check rows
	            }
	            if (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer) {
	                return true; // Check columns
	            }
	        }

	        if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) {
	            return true; // Check diagonal
	        }
	        if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer) {
	            return true; // Check diagonal
	        }

	        return false;
	    }

	    private static boolean isBoardFull() {
	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                if (board[i][j] == ' ') {
	                    return false; // Board is not full
	                }
	            }
	        }
	        return true; // Board is full (draw)
	    }

	    private static void switchPlayer() {
	        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
	    }
	}
